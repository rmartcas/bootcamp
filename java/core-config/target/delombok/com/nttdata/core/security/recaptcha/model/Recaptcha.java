// Generated by delombok at Tue Jul 18 12:47:58 CEST 2023
/*******************************************************************************
 * Copyright (C) 2023 NTT DATA, All Rights Reserved
 *******************************************************************************/
package com.nttdata.core.security.recaptcha.model;

import java.util.Date;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Recaptcha entity
 * 
 * @author NTT DATA
 * @since 0.0.1
 */
public class Recaptcha {
	/**
	 * whether this request was a valid reCAPTCHA token for your site.
	 */
	private boolean success;
	/**
	 * the score for this request (0.0 - 1.0).
	 */
	private float score;
	/**
	 * the action name for this request (important to verify).
	 */
	private String action;
	/**
	 * timestamp of the challenge load (ISO format yyyy-MM-dd'T'HH:mm:ssZZ).
	 */
	@JsonProperty("challenge_ts")
	private Date challengeTs;
	/**
	 * the hostname of the site where the reCAPTCHA was solved.
	 */
	private String hostname;
	/**
	 * the error codes in recaptcha validation.
	 */
	@JsonProperty("error-codes")
	private List<String> errorCodes;

	/**
	 * whether this request was a valid reCAPTCHA token for your site.
	 * @return {@link Boolean} the success
	 */
	@java.lang.SuppressWarnings("all")
	public boolean isSuccess() {
		return this.success;
	}

	/**
	 * the score for this request (0.0 - 1.0).
	 * @return {@link Float} the score
	 */
	@java.lang.SuppressWarnings("all")
	public float getScore() {
		return this.score;
	}

	/**
	 * the action name for this request (important to verify).
	 * @return {@link String} the action
	 */
	@java.lang.SuppressWarnings("all")
	public String getAction() {
		return this.action;
	}

	/**
	 * timestamp of the challenge load (ISO format yyyy-MM-dd'T'HH:mm:ssZZ).
	 * @return {@link Date} the challengeTs
	 */
	@java.lang.SuppressWarnings("all")
	public Date getChallengeTs() {
		return this.challengeTs;
	}

	/**
	 * the hostname of the site where the reCAPTCHA was solved.
	 * @return {@link String} the hostname
	 */
	@java.lang.SuppressWarnings("all")
	public String getHostname() {
		return this.hostname;
	}

	/**
	 * the error codes in recaptcha validation.
	 * @return {@link List} the errorCodes
	 */
	@java.lang.SuppressWarnings("all")
	public List<String> getErrorCodes() {
		return this.errorCodes;
	}

	/**
	 * whether this request was a valid reCAPTCHA token for your site.
	 * @param success {@link Boolean} The success
	 */
	@java.lang.SuppressWarnings("all")
	public void setSuccess(final boolean success) {
		this.success = success;
	}

	/**
	 * the score for this request (0.0 - 1.0).
	 * @param score {@link Float} The score
	 */
	@java.lang.SuppressWarnings("all")
	public void setScore(final float score) {
		this.score = score;
	}

	/**
	 * the action name for this request (important to verify).
	 * @param action {@link String} The action
	 */
	@java.lang.SuppressWarnings("all")
	public void setAction(final String action) {
		this.action = action;
	}

	/**
	 * timestamp of the challenge load (ISO format yyyy-MM-dd'T'HH:mm:ssZZ).
	 * @param challengeTs {@link Date} The challengeTs
	 */
	@JsonProperty("challenge_ts")
	@java.lang.SuppressWarnings("all")
	public void setChallengeTs(final Date challengeTs) {
		this.challengeTs = challengeTs;
	}

	/**
	 * the hostname of the site where the reCAPTCHA was solved.
	 * @param hostname {@link String} The hostname
	 */
	@java.lang.SuppressWarnings("all")
	public void setHostname(final String hostname) {
		this.hostname = hostname;
	}

	/**
	 * the error codes in recaptcha validation.
	 * @param errorCodes {@link List} The errorCodes
	 */
	@JsonProperty("error-codes")
	@java.lang.SuppressWarnings("all")
	public void setErrorCodes(final List<String> errorCodes) {
		this.errorCodes = errorCodes;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof Recaptcha)) return false;
		final Recaptcha other = (Recaptcha) o;
		if (!other.canEqual((java.lang.Object) this)) return false;
		if (this.isSuccess() != other.isSuccess()) return false;
		if (java.lang.Float.compare(this.getScore(), other.getScore()) != 0) return false;
		final java.lang.Object this$action = this.getAction();
		final java.lang.Object other$action = other.getAction();
		if (this$action == null ? other$action != null : !this$action.equals(other$action)) return false;
		final java.lang.Object this$challengeTs = this.getChallengeTs();
		final java.lang.Object other$challengeTs = other.getChallengeTs();
		if (this$challengeTs == null ? other$challengeTs != null : !this$challengeTs.equals(other$challengeTs)) return false;
		final java.lang.Object this$hostname = this.getHostname();
		final java.lang.Object other$hostname = other.getHostname();
		if (this$hostname == null ? other$hostname != null : !this$hostname.equals(other$hostname)) return false;
		final java.lang.Object this$errorCodes = this.getErrorCodes();
		final java.lang.Object other$errorCodes = other.getErrorCodes();
		if (this$errorCodes == null ? other$errorCodes != null : !this$errorCodes.equals(other$errorCodes)) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof Recaptcha;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		result = result * PRIME + (this.isSuccess() ? 79 : 97);
		result = result * PRIME + java.lang.Float.floatToIntBits(this.getScore());
		final java.lang.Object $action = this.getAction();
		result = result * PRIME + ($action == null ? 43 : $action.hashCode());
		final java.lang.Object $challengeTs = this.getChallengeTs();
		result = result * PRIME + ($challengeTs == null ? 43 : $challengeTs.hashCode());
		final java.lang.Object $hostname = this.getHostname();
		result = result * PRIME + ($hostname == null ? 43 : $hostname.hashCode());
		final java.lang.Object $errorCodes = this.getErrorCodes();
		result = result * PRIME + ($errorCodes == null ? 43 : $errorCodes.hashCode());
		return result;
	}

	@java.lang.SuppressWarnings("all")
	public Recaptcha() {
	}
}
