// Generated by delombok at Tue Jul 18 12:47:58 CEST 2023
/*******************************************************************************
 * Copyright (C) 2023 NTT DATA, All Rights Reserved
 *******************************************************************************/
package com.nttdata.core.common.model;

import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.nttdata.core.menu.model.Menu;

/**
 * Config data for application
 * 
 * @author NTT DATA
 * @since 0.0.1
 */
@JsonInclude(Include.NON_NULL)
public class CoreConfig {
	/**
	 * Current locale.
	 */
	private String locale;
	/**
	 * Default locale.
	 */
	private String defaultLocale;
	/**
	 * List of available locales.
	 */
	private List<String> locales;
	/**
	 * The current authenticated user.
	 */
	private CoreUser user;
	/**
	 * Map of api endpoints. Filled with all api modules the user has access to.
	 */
	private Map<String, Object> api;
	/**
	 * List of available menus.
	 */
	private List<Menu> menus;
	/**
	 * The recaptcha config.
	 */
	private RecaptchaConfig recaptcha;
	/**
	 * The pagination default settings.
	 */
	private PageConfig pagination;

	/**
	 * Current locale.
	 * @return {@link String} the locale
	 */
	@java.lang.SuppressWarnings("all")
	public String getLocale() {
		return this.locale;
	}

	/**
	 * Default locale.
	 * @return {@link String} the defaultLocale
	 */
	@java.lang.SuppressWarnings("all")
	public String getDefaultLocale() {
		return this.defaultLocale;
	}

	/**
	 * List of available locales.
	 * @return {@link List} the locales
	 */
	@java.lang.SuppressWarnings("all")
	public List<String> getLocales() {
		return this.locales;
	}

	/**
	 * The current authenticated user.
	 * @return {@link CoreUser} the user
	 */
	@java.lang.SuppressWarnings("all")
	public CoreUser getUser() {
		return this.user;
	}

	/**
	 * Map of api endpoints. Filled with all api modules the user has access to.
	 * @return {@link Map} the api
	 */
	@java.lang.SuppressWarnings("all")
	public Map<String, Object> getApi() {
		return this.api;
	}

	/**
	 * List of available menus.
	 * @return {@link List} the menus
	 */
	@java.lang.SuppressWarnings("all")
	public List<Menu> getMenus() {
		return this.menus;
	}

	/**
	 * The recaptcha config.
	 * @return {@link RecaptchaConfig} the recaptcha config to use
	 */
	@java.lang.SuppressWarnings("all")
	public RecaptchaConfig getRecaptcha() {
		return this.recaptcha;
	}

	/**
	 * The pagination default settings.
	 * @return {@link PageConfig} the pagination
	 */
	@java.lang.SuppressWarnings("all")
	public PageConfig getPagination() {
		return this.pagination;
	}

	/**
	 * Current locale.
	 * @param locale {@link String} The locale
	 */
	@java.lang.SuppressWarnings("all")
	public void setLocale(final String locale) {
		this.locale = locale;
	}

	/**
	 * Default locale.
	 * @param defaultLocale {@link String} The defaultLocale
	 */
	@java.lang.SuppressWarnings("all")
	public void setDefaultLocale(final String defaultLocale) {
		this.defaultLocale = defaultLocale;
	}

	/**
	 * List of available locales.
	 * @param locales {@link List} The locales
	 */
	@java.lang.SuppressWarnings("all")
	public void setLocales(final List<String> locales) {
		this.locales = locales;
	}

	/**
	 * The current authenticated user.
	 * @param user {@link CoreUser} The user
	 */
	@java.lang.SuppressWarnings("all")
	public void setUser(final CoreUser user) {
		this.user = user;
	}

	/**
	 * Map of api endpoints. Filled with all api modules the user has access to.
	 * @param api {@link Map} The api
	 */
	@java.lang.SuppressWarnings("all")
	public void setApi(final Map<String, Object> api) {
		this.api = api;
	}

	/**
	 * List of available menus.
	 * @param menus {@link List} The menus
	 */
	@java.lang.SuppressWarnings("all")
	public void setMenus(final List<Menu> menus) {
		this.menus = menus;
	}

	/**
	 * The recaptcha config.
	 * @param recaptcha {@link RecaptchaConfig} The recaptcha config to use
	 */
	@java.lang.SuppressWarnings("all")
	public void setRecaptcha(final RecaptchaConfig recaptcha) {
		this.recaptcha = recaptcha;
	}

	/**
	 * The pagination default settings.
	 * @param pagination {@link PageConfig} The pagination
	 */
	@java.lang.SuppressWarnings("all")
	public void setPagination(final PageConfig pagination) {
		this.pagination = pagination;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof CoreConfig)) return false;
		final CoreConfig other = (CoreConfig) o;
		if (!other.canEqual((java.lang.Object) this)) return false;
		final java.lang.Object this$locale = this.getLocale();
		final java.lang.Object other$locale = other.getLocale();
		if (this$locale == null ? other$locale != null : !this$locale.equals(other$locale)) return false;
		final java.lang.Object this$defaultLocale = this.getDefaultLocale();
		final java.lang.Object other$defaultLocale = other.getDefaultLocale();
		if (this$defaultLocale == null ? other$defaultLocale != null : !this$defaultLocale.equals(other$defaultLocale)) return false;
		final java.lang.Object this$locales = this.getLocales();
		final java.lang.Object other$locales = other.getLocales();
		if (this$locales == null ? other$locales != null : !this$locales.equals(other$locales)) return false;
		final java.lang.Object this$user = this.getUser();
		final java.lang.Object other$user = other.getUser();
		if (this$user == null ? other$user != null : !this$user.equals(other$user)) return false;
		final java.lang.Object this$api = this.getApi();
		final java.lang.Object other$api = other.getApi();
		if (this$api == null ? other$api != null : !this$api.equals(other$api)) return false;
		final java.lang.Object this$menus = this.getMenus();
		final java.lang.Object other$menus = other.getMenus();
		if (this$menus == null ? other$menus != null : !this$menus.equals(other$menus)) return false;
		final java.lang.Object this$recaptcha = this.getRecaptcha();
		final java.lang.Object other$recaptcha = other.getRecaptcha();
		if (this$recaptcha == null ? other$recaptcha != null : !this$recaptcha.equals(other$recaptcha)) return false;
		final java.lang.Object this$pagination = this.getPagination();
		final java.lang.Object other$pagination = other.getPagination();
		if (this$pagination == null ? other$pagination != null : !this$pagination.equals(other$pagination)) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof CoreConfig;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		final java.lang.Object $locale = this.getLocale();
		result = result * PRIME + ($locale == null ? 43 : $locale.hashCode());
		final java.lang.Object $defaultLocale = this.getDefaultLocale();
		result = result * PRIME + ($defaultLocale == null ? 43 : $defaultLocale.hashCode());
		final java.lang.Object $locales = this.getLocales();
		result = result * PRIME + ($locales == null ? 43 : $locales.hashCode());
		final java.lang.Object $user = this.getUser();
		result = result * PRIME + ($user == null ? 43 : $user.hashCode());
		final java.lang.Object $api = this.getApi();
		result = result * PRIME + ($api == null ? 43 : $api.hashCode());
		final java.lang.Object $menus = this.getMenus();
		result = result * PRIME + ($menus == null ? 43 : $menus.hashCode());
		final java.lang.Object $recaptcha = this.getRecaptcha();
		result = result * PRIME + ($recaptcha == null ? 43 : $recaptcha.hashCode());
		final java.lang.Object $pagination = this.getPagination();
		result = result * PRIME + ($pagination == null ? 43 : $pagination.hashCode());
		return result;
	}

	@java.lang.SuppressWarnings("all")
	public CoreConfig() {
	}
}
