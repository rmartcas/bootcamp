// Generated by delombok at Tue Jul 18 12:47:58 CEST 2023
/*******************************************************************************
 * Copyright (C) 2023 NTT DATA, All Rights Reserved
 *******************************************************************************/
package com.nttdata.core.common.model;

import java.io.Serializable;
import org.springframework.data.domain.Sort.Direction;
import com.fasterxml.jackson.annotation.JsonIgnore;

/**
 * Page order class used to sort paged queries
 * 
 * @author NTT DATA
 * @since 0.0.1
 */
public class PageOrder implements Serializable {
	/**
	 * serialVersionUID
	 */
	private static final long serialVersionUID = 1L;
	/**
	 * The used property to order.
	 */
	private String property;
	/**
	 * The sort direction, ASC by default.
	 */
	private Direction order = Direction.ASC;
	/**
	 * Parse sort order as string?. Default false.
	 */
	@JsonIgnore
	private Boolean sortAsString = Boolean.FALSE;

	/**
	 * PageOrder constructor using property parameter
	 * @param property The property to sort
	 */
	public PageOrder(String property) {
		super();
		this.property = property;
	}

	/**
	 * PageOrder constructor using property and asStrig parameters
	 * @param property The property to sort
	 * @param asString If this property is used as string or a column
	 */
	public PageOrder(String property, Boolean asString) {
		super();
		this.property = property;
		this.sortAsString = asString;
	}

	/**
	 * PageOrder constructor using property and order parameters
	 * @param property The property to sort
	 * @param order The order for this property
	 */
	public PageOrder(String property, Direction order) {
		super();
		this.property = property;
		this.order = order;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof PageOrder)) return false;
		final PageOrder other = (PageOrder) o;
		if (!other.canEqual((java.lang.Object) this)) return false;
		final java.lang.Object this$sortAsString = this.getSortAsString();
		final java.lang.Object other$sortAsString = other.getSortAsString();
		if (this$sortAsString == null ? other$sortAsString != null : !this$sortAsString.equals(other$sortAsString)) return false;
		final java.lang.Object this$property = this.getProperty();
		final java.lang.Object other$property = other.getProperty();
		if (this$property == null ? other$property != null : !this$property.equals(other$property)) return false;
		final java.lang.Object this$order = this.getOrder();
		final java.lang.Object other$order = other.getOrder();
		if (this$order == null ? other$order != null : !this$order.equals(other$order)) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof PageOrder;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		final java.lang.Object $sortAsString = this.getSortAsString();
		result = result * PRIME + ($sortAsString == null ? 43 : $sortAsString.hashCode());
		final java.lang.Object $property = this.getProperty();
		result = result * PRIME + ($property == null ? 43 : $property.hashCode());
		final java.lang.Object $order = this.getOrder();
		result = result * PRIME + ($order == null ? 43 : $order.hashCode());
		return result;
	}

	/**
	 * The used property to order.
	 * @return {@link String} the property
	 */
	@java.lang.SuppressWarnings("all")
	public String getProperty() {
		return this.property;
	}

	/**
	 * The sort direction, ASC by default.
	 * @return {@link Direction} the order
	 */
	@java.lang.SuppressWarnings("all")
	public Direction getOrder() {
		return this.order;
	}

	/**
	 * Parse sort order as string?. Default false.
	 * @return {@link Boolean} the sortAsString
	 */
	@java.lang.SuppressWarnings("all")
	public Boolean getSortAsString() {
		return this.sortAsString;
	}

	/**
	 * The used property to order.
	 * @param property {@link String} The property
	 */
	@java.lang.SuppressWarnings("all")
	public void setProperty(final String property) {
		this.property = property;
	}

	/**
	 * The sort direction, ASC by default.
	 * @param order {@link Direction} The order
	 */
	@java.lang.SuppressWarnings("all")
	public void setOrder(final Direction order) {
		this.order = order;
	}

	/**
	 * Parse sort order as string?. Default false.
	 * @param sortAsString {@link Boolean} The sortAsString
	 */
	@JsonIgnore
	@java.lang.SuppressWarnings("all")
	public void setSortAsString(final Boolean sortAsString) {
		this.sortAsString = sortAsString;
	}

	@java.lang.SuppressWarnings("all")
	public PageOrder(final String property, final Direction order, final Boolean sortAsString) {
		this.property = property;
		this.order = order;
		this.sortAsString = sortAsString;
	}

	@java.lang.SuppressWarnings("all")
	public PageOrder() {
	}
}
