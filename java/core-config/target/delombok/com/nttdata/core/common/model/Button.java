// Generated by delombok at Tue Jul 18 12:47:58 CEST 2023
/*******************************************************************************
 * Copyright (C) 2023 NTT DATA, All Rights Reserved
 *******************************************************************************/
package com.nttdata.core.common.model;

import java.io.Serializable;
import com.nttdata.core.common.EnabledOnEnum;

/**
 * Entity to represent a table button in the front app
 * 
 * @see com.nttdata.core.common.service.Initializable#init(Page)
 * @see com.nttdata.core.common.service.Initializable#init(Core)
 * 
 * @author NTT DATA
 * @since 0.0.1
 */
public class Button implements Serializable {
	/**
	 * serialVersionUID
	 */
	private static final long serialVersionUID = 1L;
	/**
	 * The name of the button.
	 */
	private String name;
	/**
	 * The icon of the button.
	 */
	private String icon;
	/**
	 * A function handler declared in the front page.
	 */
	private String handler;
	/**
	 * Is the button enabled?. Default is true.
	 */
	private EnabledOnEnum enabled;
	/**
	 * A function handler declared in the front page
	 * that evaluates if the button should be enabled or not.
	 */
	private String enabledCondition;
	/**
	 * The roles that allow the access to this button.
	 */
	private String[] roles;
	/**
	 * Evaluate if the button is shown for each row or not.
	 */
	private boolean isRowButton;
	/**
	 * Evaluate if the button should be disabled when front validation fails.
	 */
	private boolean disabledWhenInvalid;

	/**
	 * The name of the button.
	 * @return {@link String} the name
	 */
	@java.lang.SuppressWarnings("all")
	public String getName() {
		return this.name;
	}

	/**
	 * The icon of the button.
	 * @return {@link String} the icon
	 */
	@java.lang.SuppressWarnings("all")
	public String getIcon() {
		return this.icon;
	}

	/**
	 * A function handler declared in the front page.
	 * @return {@link String} the handler function name
	 */
	@java.lang.SuppressWarnings("all")
	public String getHandler() {
		return this.handler;
	}

	/**
	 * Is the button enabled?. Default is true.
	 * @return {@link EnabledOnEnum} the enabled state
	 */
	@java.lang.SuppressWarnings("all")
	public EnabledOnEnum getEnabled() {
		return this.enabled;
	}

	/**
	 * A function handler declared in the front page
	 * that evaluates if the button should be enabled or not.
	 * @return {@link String} the handler function name
	 */
	@java.lang.SuppressWarnings("all")
	public String getEnabledCondition() {
		return this.enabledCondition;
	}

	/**
	 * The roles that allow the access to this button.
	 * @return {@link String}[] the roles
	 */
	@java.lang.SuppressWarnings("all")
	public String[] getRoles() {
		return this.roles;
	}

	/**
	 * Evaluate if the button is shown for each row or not.
	 * @return {@link Boolean} the row button state
	 */
	@java.lang.SuppressWarnings("all")
	public boolean isRowButton() {
		return this.isRowButton;
	}

	/**
	 * Evaluate if the button should be disabled when front validation fails.
	 * @return {@link Boolean} the disabled state
	 */
	@java.lang.SuppressWarnings("all")
	public boolean isDisabledWhenInvalid() {
		return this.disabledWhenInvalid;
	}

	/**
	 * The name of the button.
	 * @param name {@link String} The name
	 */
	@java.lang.SuppressWarnings("all")
	public void setName(final String name) {
		this.name = name;
	}

	/**
	 * The icon of the button.
	 * @param icon {@link String} The icon
	 */
	@java.lang.SuppressWarnings("all")
	public void setIcon(final String icon) {
		this.icon = icon;
	}

	/**
	 * A function handler declared in the front page.
	 * @param handler {@link String} The handler function name
	 */
	@java.lang.SuppressWarnings("all")
	public void setHandler(final String handler) {
		this.handler = handler;
	}

	/**
	 * Is the button enabled?. Default is true.
	 * @param enabled {@link EnabledOnEnum} The enabled state
	 */
	@java.lang.SuppressWarnings("all")
	public void setEnabled(final EnabledOnEnum enabled) {
		this.enabled = enabled;
	}

	/**
	 * A function handler declared in the front page
	 * that evaluates if the button should be enabled or not.
	 * @param enabledCondition {@link String} The handler function name
	 */
	@java.lang.SuppressWarnings("all")
	public void setEnabledCondition(final String enabledCondition) {
		this.enabledCondition = enabledCondition;
	}

	/**
	 * The roles that allow the access to this button.
	 * @param roles {@link String}[] The roles
	 */
	@java.lang.SuppressWarnings("all")
	public void setRoles(final String[] roles) {
		this.roles = roles;
	}

	/**
	 * Evaluate if the button is shown for each row or not.
	 * @param isRowButton {@link Boolean} The row button state
	 */
	@java.lang.SuppressWarnings("all")
	public void setRowButton(final boolean isRowButton) {
		this.isRowButton = isRowButton;
	}

	/**
	 * Evaluate if the button should be disabled when front validation fails.
	 * @param disabledWhenInvalid {@link Boolean} The disabled state
	 */
	@java.lang.SuppressWarnings("all")
	public void setDisabledWhenInvalid(final boolean disabledWhenInvalid) {
		this.disabledWhenInvalid = disabledWhenInvalid;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof Button)) return false;
		final Button other = (Button) o;
		if (!other.canEqual((java.lang.Object) this)) return false;
		if (this.isRowButton() != other.isRowButton()) return false;
		if (this.isDisabledWhenInvalid() != other.isDisabledWhenInvalid()) return false;
		final java.lang.Object this$name = this.getName();
		final java.lang.Object other$name = other.getName();
		if (this$name == null ? other$name != null : !this$name.equals(other$name)) return false;
		final java.lang.Object this$icon = this.getIcon();
		final java.lang.Object other$icon = other.getIcon();
		if (this$icon == null ? other$icon != null : !this$icon.equals(other$icon)) return false;
		final java.lang.Object this$handler = this.getHandler();
		final java.lang.Object other$handler = other.getHandler();
		if (this$handler == null ? other$handler != null : !this$handler.equals(other$handler)) return false;
		final java.lang.Object this$enabled = this.getEnabled();
		final java.lang.Object other$enabled = other.getEnabled();
		if (this$enabled == null ? other$enabled != null : !this$enabled.equals(other$enabled)) return false;
		final java.lang.Object this$enabledCondition = this.getEnabledCondition();
		final java.lang.Object other$enabledCondition = other.getEnabledCondition();
		if (this$enabledCondition == null ? other$enabledCondition != null : !this$enabledCondition.equals(other$enabledCondition)) return false;
		if (!java.util.Arrays.deepEquals(this.getRoles(), other.getRoles())) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof Button;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		result = result * PRIME + (this.isRowButton() ? 79 : 97);
		result = result * PRIME + (this.isDisabledWhenInvalid() ? 79 : 97);
		final java.lang.Object $name = this.getName();
		result = result * PRIME + ($name == null ? 43 : $name.hashCode());
		final java.lang.Object $icon = this.getIcon();
		result = result * PRIME + ($icon == null ? 43 : $icon.hashCode());
		final java.lang.Object $handler = this.getHandler();
		result = result * PRIME + ($handler == null ? 43 : $handler.hashCode());
		final java.lang.Object $enabled = this.getEnabled();
		result = result * PRIME + ($enabled == null ? 43 : $enabled.hashCode());
		final java.lang.Object $enabledCondition = this.getEnabledCondition();
		result = result * PRIME + ($enabledCondition == null ? 43 : $enabledCondition.hashCode());
		result = result * PRIME + java.util.Arrays.deepHashCode(this.getRoles());
		return result;
	}

	@java.lang.SuppressWarnings("all")
	public Button() {
	}
}
