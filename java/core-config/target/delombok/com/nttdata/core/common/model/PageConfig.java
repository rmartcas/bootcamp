// Generated by delombok at Tue Jul 18 12:47:58 CEST 2023
/*******************************************************************************
 * Copyright (C) 2023 NTT DATA, All Rights Reserved
 *******************************************************************************/
package com.nttdata.core.common.model;

/**
 * Pagination Config data for application
 * 
 * @author NTT DATA
 * @since 0.0.1
 */
public class PageConfig {
	/**
	 * Default page number.
	 */
	private int page;
	/**
	 * Default number of records by page.
	 */
	private int size;
	/**
	 * How many records by page are allowed in selector
	 */
	private Integer[] pageLimits;

	/**
	 * Default page number.
	 * @return {@link Integer} the page
	 */
	@java.lang.SuppressWarnings("all")
	public int getPage() {
		return this.page;
	}

	/**
	 * Default number of records by page.
	 * @return {@link Integer} the size
	 */
	@java.lang.SuppressWarnings("all")
	public int getSize() {
		return this.size;
	}

	/**
	 * How many records by page are allowed in selector
	 * @return {@link Integer[]} the pageLimits
	 */
	@java.lang.SuppressWarnings("all")
	public Integer[] getPageLimits() {
		return this.pageLimits;
	}

	/**
	 * Default page number.
	 * @param page {@link Integer} The page
	 */
	@java.lang.SuppressWarnings("all")
	public void setPage(final int page) {
		this.page = page;
	}

	/**
	 * Default number of records by page.
	 * @param size {@link Integer} The size
	 */
	@java.lang.SuppressWarnings("all")
	public void setSize(final int size) {
		this.size = size;
	}

	/**
	 * How many records by page are allowed in selector
	 * @param pageLimits {@link Integer[]} The pageLimits
	 */
	@java.lang.SuppressWarnings("all")
	public void setPageLimits(final Integer[] pageLimits) {
		this.pageLimits = pageLimits;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof PageConfig)) return false;
		final PageConfig other = (PageConfig) o;
		if (!other.canEqual((java.lang.Object) this)) return false;
		if (this.getPage() != other.getPage()) return false;
		if (this.getSize() != other.getSize()) return false;
		if (!java.util.Arrays.deepEquals(this.getPageLimits(), other.getPageLimits())) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof PageConfig;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		result = result * PRIME + this.getPage();
		result = result * PRIME + this.getSize();
		result = result * PRIME + java.util.Arrays.deepHashCode(this.getPageLimits());
		return result;
	}

	@java.lang.SuppressWarnings("all")
	public PageConfig() {
	}
}
