// Generated by delombok at Tue Jul 18 12:47:58 CEST 2023
/*******************************************************************************
 * Copyright (C) 2023 NTT DATA, All Rights Reserved
 *******************************************************************************/
package com.nttdata.core.combos.model;

import java.io.Serializable;
import lombok.NonNull;

/**
 * Combo joins for the main table to filter
 * 
 * @author NTT DATA
 * @since 0.0.1
 */
public class ComboJoinTable implements Serializable {
	/**
	 * serialVersionUID
	 */
	private static final long serialVersionUID = 1L;


	public enum JoinType {
		INNER_JOIN("INNER JOIN"), LEFT_JOIN("LEFT JOIN"), RIGHT_JOIN("RIGHT JOIN"), FULL_JOIN("FULL JOIN");
		private final String type;

		private JoinType(String joinType) {
			this.type = joinType;
		}

		@java.lang.SuppressWarnings("all")
		public String getType() {
			return this.type;
		}
	}

	/**
	 * The table field used to filter
	 */
	@NonNull
	private String table;
	/**
	 * The table used to join within {@code table} field.
	 * In case to be null {@link ComboPage#table} field will be used.
	 */
	private String originTable;
	/**
	 * The join type to apply in this join
	 */
	@NonNull
	private JoinType type;
	/**
	 * The "from" table column to join with.
	 */
	@NonNull
	private String originTableJoinColumn;
	/**
	 * The "join" table column to join with.
	 */
	@NonNull
	private String joinTableJoinColumn;

	/**
	 * Constructor with optional {@code originTable}
	 * @param table {@link String} The table to join
	 * @param type {@link JoinType} The join type
	 * @param originTableJoinColumn {@link String} The from column
	 * @param joinTableJoinColumn {@link String} The join column
	 */
	public ComboJoinTable(String table, JoinType type, String originTableJoinColumn, String joinTableJoinColumn) {
		this(table, null, type, originTableJoinColumn, joinTableJoinColumn);
	}

	/**
	 * The table field used to filter
	 * @return {@link String} the table to join
	 */
	@NonNull
	@java.lang.SuppressWarnings("all")
	public String getTable() {
		return this.table;
	}

	/**
	 * The table used to join within {@code table} field.
	 * In case to be null {@link ComboPage#table} field will be used.
	 * @return {@link String} the table to join
	 */
	@java.lang.SuppressWarnings("all")
	public String getOriginTable() {
		return this.originTable;
	}

	/**
	 * The join type to apply in this join
	 * @return {@link JoinType} the join type
	 */
	@NonNull
	@java.lang.SuppressWarnings("all")
	public JoinType getType() {
		return this.type;
	}

	/**
	 * The "from" table column to join with.
	 * @return {@link String} the from column
	 */
	@NonNull
	@java.lang.SuppressWarnings("all")
	public String getOriginTableJoinColumn() {
		return this.originTableJoinColumn;
	}

	/**
	 * The "join" table column to join with.
	 * @return {@link String} the join column
	 */
	@NonNull
	@java.lang.SuppressWarnings("all")
	public String getJoinTableJoinColumn() {
		return this.joinTableJoinColumn;
	}

	/**
	 * The table field used to filter
	 * @param table {@link String} The table to join
	 */
	@java.lang.SuppressWarnings("all")
	public void setTable(@NonNull final String table) {
		if (table == null) {
			throw new java.lang.NullPointerException("table is marked non-null but is null");
		}
		this.table = table;
	}

	/**
	 * The table used to join within {@code table} field.
	 * In case to be null {@link ComboPage#table} field will be used.
	 * @param originTable {@link String} The table to join
	 */
	@java.lang.SuppressWarnings("all")
	public void setOriginTable(final String originTable) {
		this.originTable = originTable;
	}

	/**
	 * The join type to apply in this join
	 * @param type {@link JoinType} The join type
	 */
	@java.lang.SuppressWarnings("all")
	public void setType(@NonNull final JoinType type) {
		if (type == null) {
			throw new java.lang.NullPointerException("type is marked non-null but is null");
		}
		this.type = type;
	}

	/**
	 * The "from" table column to join with.
	 * @param originTableJoinColumn {@link String} The from column
	 */
	@java.lang.SuppressWarnings("all")
	public void setOriginTableJoinColumn(@NonNull final String originTableJoinColumn) {
		if (originTableJoinColumn == null) {
			throw new java.lang.NullPointerException("originTableJoinColumn is marked non-null but is null");
		}
		this.originTableJoinColumn = originTableJoinColumn;
	}

	/**
	 * The "join" table column to join with.
	 * @param joinTableJoinColumn {@link String} The join column
	 */
	@java.lang.SuppressWarnings("all")
	public void setJoinTableJoinColumn(@NonNull final String joinTableJoinColumn) {
		if (joinTableJoinColumn == null) {
			throw new java.lang.NullPointerException("joinTableJoinColumn is marked non-null but is null");
		}
		this.joinTableJoinColumn = joinTableJoinColumn;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof ComboJoinTable)) return false;
		final ComboJoinTable other = (ComboJoinTable) o;
		if (!other.canEqual((java.lang.Object) this)) return false;
		final java.lang.Object this$table = this.getTable();
		final java.lang.Object other$table = other.getTable();
		if (this$table == null ? other$table != null : !this$table.equals(other$table)) return false;
		final java.lang.Object this$originTable = this.getOriginTable();
		final java.lang.Object other$originTable = other.getOriginTable();
		if (this$originTable == null ? other$originTable != null : !this$originTable.equals(other$originTable)) return false;
		final java.lang.Object this$type = this.getType();
		final java.lang.Object other$type = other.getType();
		if (this$type == null ? other$type != null : !this$type.equals(other$type)) return false;
		final java.lang.Object this$originTableJoinColumn = this.getOriginTableJoinColumn();
		final java.lang.Object other$originTableJoinColumn = other.getOriginTableJoinColumn();
		if (this$originTableJoinColumn == null ? other$originTableJoinColumn != null : !this$originTableJoinColumn.equals(other$originTableJoinColumn)) return false;
		final java.lang.Object this$joinTableJoinColumn = this.getJoinTableJoinColumn();
		final java.lang.Object other$joinTableJoinColumn = other.getJoinTableJoinColumn();
		if (this$joinTableJoinColumn == null ? other$joinTableJoinColumn != null : !this$joinTableJoinColumn.equals(other$joinTableJoinColumn)) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof ComboJoinTable;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		final java.lang.Object $table = this.getTable();
		result = result * PRIME + ($table == null ? 43 : $table.hashCode());
		final java.lang.Object $originTable = this.getOriginTable();
		result = result * PRIME + ($originTable == null ? 43 : $originTable.hashCode());
		final java.lang.Object $type = this.getType();
		result = result * PRIME + ($type == null ? 43 : $type.hashCode());
		final java.lang.Object $originTableJoinColumn = this.getOriginTableJoinColumn();
		result = result * PRIME + ($originTableJoinColumn == null ? 43 : $originTableJoinColumn.hashCode());
		final java.lang.Object $joinTableJoinColumn = this.getJoinTableJoinColumn();
		result = result * PRIME + ($joinTableJoinColumn == null ? 43 : $joinTableJoinColumn.hashCode());
		return result;
	}

	@java.lang.SuppressWarnings("all")
	public ComboJoinTable(@NonNull final String table, final String originTable, @NonNull final JoinType type, @NonNull final String originTableJoinColumn, @NonNull final String joinTableJoinColumn) {
		if (table == null) {
			throw new java.lang.NullPointerException("table is marked non-null but is null");
		}
		if (type == null) {
			throw new java.lang.NullPointerException("type is marked non-null but is null");
		}
		if (originTableJoinColumn == null) {
			throw new java.lang.NullPointerException("originTableJoinColumn is marked non-null but is null");
		}
		if (joinTableJoinColumn == null) {
			throw new java.lang.NullPointerException("joinTableJoinColumn is marked non-null but is null");
		}
		this.table = table;
		this.originTable = originTable;
		this.type = type;
		this.originTableJoinColumn = originTableJoinColumn;
		this.joinTableJoinColumn = joinTableJoinColumn;
	}
}
