// Generated by delombok at Tue Jul 18 12:47:58 CEST 2023
/*******************************************************************************
 * Copyright (C) 2023 NTT DATA, All Rights Reserved
 *******************************************************************************/
package com.nttdata.core.combos.model;

import java.util.List;
import com.nttdata.core.common.model.Core;

/**
 * Combo entity used for search combo data
 * 
 * @author NTT DATA
 * @since 0.0.1
 */
public class ComboPage extends Core<Long> {
	/**
	 * serialVersionUID
	 */
	private static final long serialVersionUID = 1L;
	/**
	 * The combo table where retreive data.
	 */
	private String table;
	/**
	 * The table column used as key.
	 */
	private String key;
	/**
	 * The table column used as text.
	 */
	private String value;
	/**
	 * Join to perform within the main <code>table</code> to filter table contents.<br>
	 * 
	 */
	private List<ComboJoinTable> joins;
	/**
	 * Criteria to filter table contents.<br>
	 * All criterias are appended with an "AND" operator.
	 * 
	 */
	private List<ComboCriteria> criteria;
	/**
	 * Column names used to group the results.<br>
	 * 
	 */
	private List<String> groupBy;

	/**
	 * The combo table where retreive data.
	 * @return {@link String} the table
	 */
	@java.lang.SuppressWarnings("all")
	public String getTable() {
		return this.table;
	}

	/**
	 * The table column used as key.
	 * @return {@link String} the key
	 */
	@java.lang.SuppressWarnings("all")
	public String getKey() {
		return this.key;
	}

	/**
	 * The table column used as text.
	 * @return {@link String} the value
	 */
	@java.lang.SuppressWarnings("all")
	public String getValue() {
		return this.value;
	}

	/**
	 * Join to perform within the main <code>table</code> to filter table contents.<br>
	 * 
	 * @return {@link List} of {@link ComboJoinTable} the joins
	 */
	@java.lang.SuppressWarnings("all")
	public List<ComboJoinTable> getJoins() {
		return this.joins;
	}

	/**
	 * Criteria to filter table contents.<br>
	 * All criterias are appended with an "AND" operator.
	 * 
	 * @return {@link List} of {@link ComboCriteria} the criteria
	 */
	@java.lang.SuppressWarnings("all")
	public List<ComboCriteria> getCriteria() {
		return this.criteria;
	}

	/**
	 * Column names used to group the results.<br>
	 * 
	 * @return {@link List} of {@link String} The group by column names
	 */
	@java.lang.SuppressWarnings("all")
	public List<String> getGroupBy() {
		return this.groupBy;
	}

	/**
	 * The combo table where retreive data.
	 * @param table {@link String} The table
	 */
	@java.lang.SuppressWarnings("all")
	public void setTable(final String table) {
		this.table = table;
	}

	/**
	 * The table column used as key.
	 * @param key {@link String} The key
	 */
	@java.lang.SuppressWarnings("all")
	public void setKey(final String key) {
		this.key = key;
	}

	/**
	 * The table column used as text.
	 * @param value {@link String} The value
	 */
	@java.lang.SuppressWarnings("all")
	public void setValue(final String value) {
		this.value = value;
	}

	/**
	 * Join to perform within the main <code>table</code> to filter table contents.<br>
	 * 
	 * @param joins {@link List} of {@link ComboJoinTable} The joins
	 */
	@java.lang.SuppressWarnings("all")
	public void setJoins(final List<ComboJoinTable> joins) {
		this.joins = joins;
	}

	/**
	 * Criteria to filter table contents.<br>
	 * All criterias are appended with an "AND" operator.
	 * 
	 * @param criteria {@link List} of {@link ComboCriteria} The criteria
	 */
	@java.lang.SuppressWarnings("all")
	public void setCriteria(final List<ComboCriteria> criteria) {
		this.criteria = criteria;
	}

	/**
	 * Column names used to group the results.<br>
	 * 
	 * @param groupBy {@link List} of {@link String} The group by column names
	 */
	@java.lang.SuppressWarnings("all")
	public void setGroupBy(final List<String> groupBy) {
		this.groupBy = groupBy;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof ComboPage)) return false;
		final ComboPage other = (ComboPage) o;
		if (!other.canEqual((java.lang.Object) this)) return false;
		if (!super.equals(o)) return false;
		final java.lang.Object this$table = this.getTable();
		final java.lang.Object other$table = other.getTable();
		if (this$table == null ? other$table != null : !this$table.equals(other$table)) return false;
		final java.lang.Object this$key = this.getKey();
		final java.lang.Object other$key = other.getKey();
		if (this$key == null ? other$key != null : !this$key.equals(other$key)) return false;
		final java.lang.Object this$value = this.getValue();
		final java.lang.Object other$value = other.getValue();
		if (this$value == null ? other$value != null : !this$value.equals(other$value)) return false;
		final java.lang.Object this$joins = this.getJoins();
		final java.lang.Object other$joins = other.getJoins();
		if (this$joins == null ? other$joins != null : !this$joins.equals(other$joins)) return false;
		final java.lang.Object this$criteria = this.getCriteria();
		final java.lang.Object other$criteria = other.getCriteria();
		if (this$criteria == null ? other$criteria != null : !this$criteria.equals(other$criteria)) return false;
		final java.lang.Object this$groupBy = this.getGroupBy();
		final java.lang.Object other$groupBy = other.getGroupBy();
		if (this$groupBy == null ? other$groupBy != null : !this$groupBy.equals(other$groupBy)) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof ComboPage;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public int hashCode() {
		final int PRIME = 59;
		int result = super.hashCode();
		final java.lang.Object $table = this.getTable();
		result = result * PRIME + ($table == null ? 43 : $table.hashCode());
		final java.lang.Object $key = this.getKey();
		result = result * PRIME + ($key == null ? 43 : $key.hashCode());
		final java.lang.Object $value = this.getValue();
		result = result * PRIME + ($value == null ? 43 : $value.hashCode());
		final java.lang.Object $joins = this.getJoins();
		result = result * PRIME + ($joins == null ? 43 : $joins.hashCode());
		final java.lang.Object $criteria = this.getCriteria();
		result = result * PRIME + ($criteria == null ? 43 : $criteria.hashCode());
		final java.lang.Object $groupBy = this.getGroupBy();
		result = result * PRIME + ($groupBy == null ? 43 : $groupBy.hashCode());
		return result;
	}

	@java.lang.SuppressWarnings("all")
	public ComboPage() {
	}
}
